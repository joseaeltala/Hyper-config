{
  "manifest": {
    "name": "hyper-launch-menu",
    "version": "4.2.1",
    "keywords": [
      "hyper",
      "hyper.app",
      "hyper-plugin"
    ],
    "description": "Adds ability to launch other shells to hyper",
    "homepage": "https://gitlab.com/zach-geek/hyper-launch-menu",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://gitlab.com/zach-geek/hyper-launch-menu.git"
    },
    "_registry": "npm",
    "_loc": "/home/jael/.hyper_plugins/cache/v6/npm-hyper-launch-menu-4.2.1-77cfbc5497cf8eab25f1b96a6cd6f404ce15dbee-integrity/node_modules/hyper-launch-menu/package.json",
    "readmeFilename": "README.md",
    "readme": "# Hyper Launch Menu\n\nAdds the ability to select (at runtime) the shell to launch on Hyper\n\n![Screenshot](screenshot.png)\n\n## Installation\n\nRun\n\n`hyper i hyper-launch-menu`\n\nOr add `'hyper-launch-menu'` to the list of `plugins` in `.hyper.js`\n\n## Configuration\n### Usage:\n\nAdd the `shells` key to the `config` object in your `.hyper.js` with a list of shells, e.g.:\n\n```\nmodule.exports = {\n  config: {\n    // ...\n\n    shells: [\n      {\n        name: \"CMD\",\n        shell: 'cmd.exe',\n        args: ['--login'],\n      },\n      {\n        name: \"Bash\",\n        group: [\n          {\n            name: \"WSL\",\n            shell: 'C:\\\\Windows\\\\System32\\\\wsl.exe',\n            args: ['--login'],\n          },\n          {\n            name: \"Git\",\n            shell: \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n            args: [\"--login\"],\n          },\n        ],\n      },\n      {\n        name: \"Powershell\",\n        shell: \"powershell.exe\",\n        default: true,\n      },\n      {\n        name: \"Cygwin\",\n        shell: \"C:\\\\cygwin64\\\\bin\\\\bash.exe\",\n        args: [\"--login\"],\n      },\n    ],\n\n    // ...\n  }\n  // ...\n}\n\n```\n### Shell parameters:\n- `name:` The name displayed for this shell in the menu\n- `shell:` A path to a custom shell to run when Hyper starts a new session\n- `args:` An array of shell arguments *[Optional]*\n- `env:` An object of environment variables to set before launching shell *[Optional]*\n- `shortcut:` Combined with the global parameter `selectShellKeymap`, binds a keymap to select the shell. This is used to add the last key for your keymap *[Optional]*\n\n### Global parameters:\n\n- `shellName:` Name for the config (vanilla) default shell [Default: `\"Default\"`]\n- `showShellInfo:` If the menu should show info about each shell [Default: `false`]\n- `showShellNotifications:` If a notification should popup each time you select a shell [Default: `true`]\n- `openOnSelect:` If true, a new tab will be opened whenever you select a shell [Default: `false`]\n- `setOnSelect:` If false, the selected shell will only be used the next time you open a shell [Default: `true`]\n- `detectShells`: If true, a shells list will be automatically created according to your operating system. [Default: `false`]\n- `selectShellKeymap`: Combined with the shell parameter `shortcut`, binds a keymap to select the shell. This is used to add the modifiers of any shell's keymap (i.e: 'ctrl+shift') [Default: `undefined`]\n\n### Features\n#### Shell groups\nSince version 4.0.0, you can group related shells together.\nThis allows you to organize your shells list, specially useful if it is a long one.\n\nYou can do this by wrapping multiple shells in a \"shell group\", like this:\n```\n{\n  name: \"Bash\",\n  group: [\n    {\n      name: \"WSL\",\n      shell: 'C:\\\\Windows\\\\System32\\\\bash.exe',\n      args: ['--login']\n    },\n    {\n      name: \"Git\",\n      shell: \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n      args: [\"--login\"]\n    },\n  ],\n},\n```\n#### Default shell\nYou can now have your default shell alongside the others inside the `shells` key.\n\nBy adding a `default` flag inside the shell object marked as `true`,\nthe plugin will automatically select it, overriding any shell provided the vanilla way.\n\n(Its name is always defined by its `name` attribute, and not the `shellName` parameter, as that only works for the vanilla one)\n\nExample:\n```\n{name: \"Powershell\", shell: \"powershell.exe\", default: true}\n```\nSelecting the default shell directly from your shells list lets you more flexibility when changing things.\n\n#### Auto-detect shells\nIf you dont specify a shells list, but set the `detectShells` flag to true,\nit will automatically create a shells list according to your operating system.\n\nSide note: When this is true, the config vanilla `shell` attributes wont be taken into account.\n\n#### Import/Export shells list\nThis feature is mainly thought to be used alongside the auto-detection.\n\nYou can export your current shells configuration to a JSON file (or your clipboard), \nand also import them, in order to try out a configuration without the need of modifying Hyper's config file.\n\nExporting is useful as JSON format is supported in the `hyper.js` file, so you can directly copy and paste the object into the file\n(setting the `shells` property to that object), and have it persistently.",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Zach Capalbo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hyper-launch-menu/-/hyper-launch-menu-4.2.1.tgz#77cfbc5497cf8eab25f1b96a6cd6f404ce15dbee",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hyper-launch-menu/-/hyper-launch-menu-4.2.1.tgz",
    "hash": "77cfbc5497cf8eab25f1b96a6cd6f404ce15dbee",
    "integrity": "sha512-3Py+uxlc9jsAh0Qh4WEo7GVUlggNykIlcEwK5bBN49fHisq7DLtumaYMWTMRWYhE+AtOX5C+25xiWeovUuoo5w==",
    "registry": "npm",
    "packageName": "hyper-launch-menu",
    "cacheIntegrity": "sha512-3Py+uxlc9jsAh0Qh4WEo7GVUlggNykIlcEwK5bBN49fHisq7DLtumaYMWTMRWYhE+AtOX5C+25xiWeovUuoo5w== sha1-d8+8VJfPjqsl8blqbNb0BM4V2+4="
  },
  "registry": "npm",
  "hash": "77cfbc5497cf8eab25f1b96a6cd6f404ce15dbee"
}