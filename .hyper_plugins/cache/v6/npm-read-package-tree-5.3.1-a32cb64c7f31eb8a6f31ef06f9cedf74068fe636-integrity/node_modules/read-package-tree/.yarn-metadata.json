{
  "manifest": {
    "name": "read-package-tree",
    "version": "5.3.1",
    "description": "Read the contents of node_modules.",
    "main": "rpt.js",
    "dependencies": {
      "read-package-json": "^2.0.0",
      "readdir-scoped-modules": "^1.0.0",
      "util-promisify": "^2.1.0"
    },
    "devDependencies": {
      "archy": "^1.0.0",
      "mkdirp": "^0.5.1",
      "tacks": "^1.2.1",
      "tap": "^12.7.0"
    },
    "scripts": {
      "test": "tap test/*.js --100",
      "snap": "TAP_SNAPSHOT=1 tap test/*.js --100",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --follow-tags"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/read-package-tree"
    },
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "http://blog.izs.me/"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/npm/read-package-tree/issues"
    },
    "homepage": "https://github.com/npm/read-package-tree",
    "files": [
      "rpt.js",
      "realpath.js"
    ],
    "tap": {
      "100": true
    },
    "_registry": "npm",
    "_loc": "/home/jael/.hyper_plugins/cache/v6/npm-read-package-tree-5.3.1-a32cb64c7f31eb8a6f31ef06f9cedf74068fe636-integrity/node_modules/read-package-tree/package.json",
    "readmeFilename": "README.md",
    "readme": "# read-package-tree\n\n[![Build Status](https://travis-ci.org/npm/read-package-tree.svg?branch=master)](https://travis-ci.org/npm/read-package-tree)\n\nRead the contents of node_modules.\n\n## USAGE\n\n```javascript\nvar rpt = require ('read-package-tree')\nrpt('/path/to/pkg/root', function (node, kidName) {\n  // optional filter functionâ€“ if included, each package folder found is passed to\n  // it to see if it should be included in the final tree\n  // node is what we're adding children to\n  // kidName is the directory name of the module we're considering adding\n  // return true -> include, false -> skip\n}, function (er, data) {\n  // er means that something didn't work.\n  // data is a structure like:\n  // {\n  //   package: <package.json data, or an empty object>\n  //   package.name: defaults to `basename(path)`\n  //   children: [ <more things like this> ]\n  //   parent: <thing that has this in its children property, or null>\n  //   path: <path loaded>\n  //   realpath: <the real path on disk>\n  //   isLink: <set if this is a Link>\n  //   target: <if a Link, then this is the actual Node>\n  //   error: <if set, the error we got loading/parsing the package.json>\n  // }\n})\n\n// or promise-style\nrpt('/path/to/pkg/root').then(data => { ... })\n```\n\nThat's it.  It doesn't figure out if dependencies are met, it doesn't\nmutate package.json data objects (beyond what\n[read-package-json](http://npm.im/read-package-json) already does), it\ndoesn't limit its search to include/exclude `devDependencies`, or\nanything else.\n\nJust follows the links in the `node_modules` hierarchy and reads the\npackage.json files it finds therein.\n\n## Symbolic Links\n\nWhen there are symlinks to packages in the `node_modules` hierarchy, a\n`Link` object will be created, with a `target` that is a `Node`\nobject.\n\nFor the most part, you can treat `Link` objects just the same as\n`Node` objects.  But if your tree-walking program needs to treat\nsymlinks differently from normal folders, then make sure to check the\nobject.\n\nIn a given `read-package-tree` run, a specific `path` will always\ncorrespond to a single object, and a specific `realpath` will always\ncorrespond to a single `Node` object.  This means that you may not be\nable to pass the resulting data object to `JSON.stringify`, because it\nmay contain cycles.\n\n## Errors\n\nErrors parsing or finding a package.json in node_modules will result in a\nnode with the error property set.  We will still find deeper node_modules\nif any exist. *Prior to `5.0.0` these aborted tree reading with an error\ncallback.*\n\nOnly a few classes of errors are fatal (result in an error callback):\n\n* If the top level location is entirely missing, that will error.\n* if `fs.realpath` returns an error for any path its trying to resolve.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/read-package-tree/-/read-package-tree-5.3.1.tgz#a32cb64c7f31eb8a6f31ef06f9cedf74068fe636",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/read-package-tree/-/read-package-tree-5.3.1.tgz",
    "hash": "a32cb64c7f31eb8a6f31ef06f9cedf74068fe636",
    "integrity": "sha512-mLUDsD5JVtlZxjSlPPx1RETkNjjvQYuweKwNVt1Sn8kP5Jh44pvYuUHCp6xSVDZWbNxVxG5lyZJ921aJH61sTw==",
    "registry": "npm",
    "packageName": "read-package-tree",
    "cacheIntegrity": "sha512-mLUDsD5JVtlZxjSlPPx1RETkNjjvQYuweKwNVt1Sn8kP5Jh44pvYuUHCp6xSVDZWbNxVxG5lyZJ921aJH61sTw== sha1-oyy2TH8x64pvMe8G+c7fdAaP5jY="
  },
  "registry": "npm",
  "hash": "a32cb64c7f31eb8a6f31ef06f9cedf74068fe636"
}