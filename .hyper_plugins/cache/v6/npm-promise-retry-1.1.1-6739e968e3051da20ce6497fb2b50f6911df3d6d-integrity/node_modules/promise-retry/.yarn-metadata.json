{
  "manifest": {
    "name": "promise-retry",
    "version": "1.1.1",
    "description": "Retries a function that returns a promise, leveraging the power of the retry module.",
    "main": "index.js",
    "scripts": {
      "test": "mocha --bail -t 10000"
    },
    "bugs": {
      "url": "https://github.com/IndigoUnited/node-promise-retry/issues/"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/IndigoUnited/node-promise-retry.git"
    },
    "keywords": [
      "retry",
      "promise",
      "backoff",
      "repeat",
      "replay"
    ],
    "author": {
      "name": "IndigoUnited",
      "email": "hello@indigounited.com",
      "url": "http://indigounited.com"
    },
    "license": "MIT",
    "devDependencies": {
      "expect.js": "^0.3.1",
      "mocha": "^3.0.0",
      "sleep-promise": "^2.0.0"
    },
    "dependencies": {
      "err-code": "^1.0.0",
      "retry": "^0.10.0"
    },
    "engines": {
      "node": ">=0.12"
    },
    "_registry": "npm",
    "_loc": "/home/jael/.hyper_plugins/cache/v6/npm-promise-retry-1.1.1-6739e968e3051da20ce6497fb2b50f6911df3d6d-integrity/node_modules/promise-retry/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-promise-retry\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency status][david-dm-image]][david-dm-url] [![Dev Dependency status][david-dm-dev-image]][david-dm-dev-url]\n\n[npm-url]:https://npmjs.org/package/promise-retry\n[downloads-image]:http://img.shields.io/npm/dm/promise-retry.svg\n[npm-image]:http://img.shields.io/npm/v/promise-retry.svg\n[travis-url]:https://travis-ci.org/IndigoUnited/node-promise-retry\n[travis-image]:http://img.shields.io/travis/IndigoUnited/node-promise-retry/master.svg\n[david-dm-url]:https://david-dm.org/IndigoUnited/node-promise-retry\n[david-dm-image]:https://img.shields.io/david/IndigoUnited/node-promise-retry.svg\n[david-dm-dev-url]:https://david-dm.org/IndigoUnited/node-promise-retry#info=devDependencies\n[david-dm-dev-image]:https://img.shields.io/david/dev/IndigoUnited/node-promise-retry.svg\n\nRetries a function that returns a promise, leveraging the power of the [retry](https://github.com/tim-kos/node-retry) module to the promises world.\n\nThere's already some modules that are able to retry functions that return promises but\nthey were rather difficult to use or do not offer an easy way to do conditional retries.\n\n\n## Installation\n\n`$ npm install promise-retry`\n\n\n## Usage\n\n### promiseRetry(fn, [options])\n\nCalls `fn` until the returned promise ends up fulfilled or rejected with an error different than\na `retry` error.   \nThe `options` argument is an object which maps to the [retry](https://github.com/tim-kos/node-retry) module options:\n\n- `retries`: The maximum amount of times to retry the operation. Default is `10`.\n- `factor`: The exponential factor to use. Default is `2`.\n- `minTimeout`: The number of milliseconds before starting the first retry. Default is `1000`.\n- `maxTimeout`: The maximum number of milliseconds between two retries. Default is `Infinity`.\n- `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `false`.\n\n\nThe `fn` function will receive a `retry` function as its first argument that should be called with an error whenever you want to retry `fn`. The `retry` function will always throw an error.   \nIf there's retries left, it will throw a special `retry` error that will be handled internally to call `fn` again.\nIf there's no retries left, it will throw the actual error passed to it.\n\nIf you prefer, you can pass the options first using the alternative function signature `promiseRetry([options], fn)`.\n\n## Example\n```js\nvar promiseRetry = require('promise-retry');\n\n// Simple example\npromiseRetry(function (retry, number) {\n    console.log('attempt number', number);\n\n    return doSomething()\n    .catch(retry);\n})\n.then(function (value) {\n    // ..\n}, function (err) {\n    // ..\n});\n\n// Conditional example\npromiseRetry(function (retry, number) {\n    console.log('attempt number', number);\n\n    return doSomething()\n    .catch(function (err) {\n        if (err.code === 'ETIMEDOUT') {\n            retry(err);\n        }\n\n        throw err;\n    });\n})\n.then(function (value) {\n    // ..\n}, function (err) {\n    // ..\n});\n```\n\n\n## Tests\n\n`$ npm test`\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n",
    "licenseText": "Copyright (c) 2014 IndigoUnited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-retry/-/promise-retry-1.1.1.tgz#6739e968e3051da20ce6497fb2b50f6911df3d6d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-retry/-/promise-retry-1.1.1.tgz",
    "hash": "6739e968e3051da20ce6497fb2b50f6911df3d6d",
    "integrity": "sha512-StEy2osPr28o17bIW776GtwO6+Q+M9zPiZkYfosciUUMYqjhU/ffwRAH0zN2+uvGyUsn8/YICIHRzLbPacpZGw==",
    "registry": "npm",
    "packageName": "promise-retry",
    "cacheIntegrity": "sha512-StEy2osPr28o17bIW776GtwO6+Q+M9zPiZkYfosciUUMYqjhU/ffwRAH0zN2+uvGyUsn8/YICIHRzLbPacpZGw== sha1-ZznpaOMFHaIM5kl/srUPaRHfPW0="
  },
  "registry": "npm",
  "hash": "6739e968e3051da20ce6497fb2b50f6911df3d6d"
}